// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feed.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace idl {

namespace {

const ::google::protobuf::Descriptor* FeedRemoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedRemoteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedAction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeedOption_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_feed_2eproto() {
  protobuf_AddDesc_feed_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "feed.proto");
  GOOGLE_CHECK(file != NULL);
  FeedRemoteInfo_descriptor_ = file->message_type(0);
  static const int FeedRemoteInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedRemoteInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedRemoteInfo, ip_),
  };
  FeedRemoteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedRemoteInfo_descriptor_,
      FeedRemoteInfo::default_instance_,
      FeedRemoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedRemoteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedRemoteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedRemoteInfo));
  FeedAction_descriptor_ = file->message_type(1);
  static const int FeedAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, remoteinfo_),
  };
  FeedAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedAction_descriptor_,
      FeedAction::default_instance_,
      FeedAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedAction));
  FeedOption_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_feed_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedRemoteInfo_descriptor_, &FeedRemoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedAction_descriptor_, &FeedAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_feed_2eproto() {
  delete FeedRemoteInfo::default_instance_;
  delete FeedRemoteInfo_reflection_;
  delete FeedAction::default_instance_;
  delete FeedAction_reflection_;
}

void protobuf_AddDesc_feed_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nfeed.proto\022\003idl\"*\n\016FeedRemoteInfo\022\014\n\004p"
    "ort\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\"p\n\nFeedAction\022\037\n\006o"
    "ption\030\001 \002(\0162\017.idl.FeedOption\022\n\n\002fd\030\002 \001(\005"
    "\022\014\n\004data\030\003 \001(\014\022\'\n\nremoteInfo\030\004 \001(\0132\023.idl"
    ".FeedRemoteInfo*R\n\nFeedOption\022\013\n\007CONNECT"
    "\020\000\022\016\n\nDISCONNECT\020\001\022\013\n\007MESSAGE\020\002\022\010\n\004PIPE\020"
    "\003\022\007\n\003ACK\020\004\022\007\n\003NEW\020\005", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "feed.proto", &protobuf_RegisterTypes);
  FeedRemoteInfo::default_instance_ = new FeedRemoteInfo();
  FeedAction::default_instance_ = new FeedAction();
  FeedRemoteInfo::default_instance_->InitAsDefaultInstance();
  FeedAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_feed_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_feed_2eproto {
  StaticDescriptorInitializer_feed_2eproto() {
    protobuf_AddDesc_feed_2eproto();
  }
} static_descriptor_initializer_feed_2eproto_;
const ::google::protobuf::EnumDescriptor* FeedOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedOption_descriptor_;
}
bool FeedOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FeedRemoteInfo::kPortFieldNumber;
const int FeedRemoteInfo::kIpFieldNumber;
#endif  // !_MSC_VER

FeedRemoteInfo::FeedRemoteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedRemoteInfo::InitAsDefaultInstance() {
}

FeedRemoteInfo::FeedRemoteInfo(const FeedRemoteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedRemoteInfo::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedRemoteInfo::~FeedRemoteInfo() {
  SharedDtor();
}

void FeedRemoteInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void FeedRemoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedRemoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedRemoteInfo_descriptor_;
}

const FeedRemoteInfo& FeedRemoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feed_2eproto();
  return *default_instance_;
}

FeedRemoteInfo* FeedRemoteInfo::default_instance_ = NULL;

FeedRemoteInfo* FeedRemoteInfo::New() const {
  return new FeedRemoteInfo;
}

void FeedRemoteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedRemoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedRemoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedRemoteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedRemoteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedRemoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedRemoteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedRemoteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedRemoteInfo::MergeFrom(const FeedRemoteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedRemoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedRemoteInfo::CopyFrom(const FeedRemoteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedRemoteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FeedRemoteInfo::Swap(FeedRemoteInfo* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedRemoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedRemoteInfo_descriptor_;
  metadata.reflection = FeedRemoteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedAction::kOptionFieldNumber;
const int FeedAction::kFdFieldNumber;
const int FeedAction::kDataFieldNumber;
const int FeedAction::kRemoteInfoFieldNumber;
#endif  // !_MSC_VER

FeedAction::FeedAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedAction::InitAsDefaultInstance() {
  remoteinfo_ = const_cast< ::idl::FeedRemoteInfo*>(&::idl::FeedRemoteInfo::default_instance());
}

FeedAction::FeedAction(const FeedAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedAction::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  fd_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remoteinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedAction::~FeedAction() {
  SharedDtor();
}

void FeedAction::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete remoteinfo_;
  }
}

void FeedAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedAction_descriptor_;
}

const FeedAction& FeedAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_feed_2eproto();
  return *default_instance_;
}

FeedAction* FeedAction::default_instance_ = NULL;

FeedAction* FeedAction::New() const {
  return new FeedAction;
}

void FeedAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 0;
    fd_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_remoteinfo()) {
      if (remoteinfo_ != NULL) remoteinfo_->::idl::FeedRemoteInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .idl.FeedOption option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::idl::FeedOption_IsValid(value)) {
            set_option(static_cast< ::idl::FeedOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }

      // optional int32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remoteInfo;
        break;
      }

      // optional .idl.FeedRemoteInfo remoteInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remoteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remoteinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .idl.FeedOption option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

  // optional int32 fd = 2;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fd(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional .idl.FeedRemoteInfo remoteInfo = 4;
  if (has_remoteinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remoteinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .idl.FeedOption option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->option(), target);
  }

  // optional int32 fd = 2;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fd(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional .idl.FeedRemoteInfo remoteInfo = 4;
  if (has_remoteinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remoteinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .idl.FeedOption option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // optional int32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .idl.FeedRemoteInfo remoteInfo = 4;
    if (has_remoteinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remoteinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedAction::MergeFrom(const FeedAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_remoteinfo()) {
      mutable_remoteinfo()->::idl::FeedRemoteInfo::MergeFrom(from.remoteinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedAction::CopyFrom(const FeedAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_remoteinfo()) {
    if (!this->remoteinfo().IsInitialized()) return false;
  }
  return true;
}

void FeedAction::Swap(FeedAction* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(fd_, other->fd_);
    std::swap(data_, other->data_);
    std::swap(remoteinfo_, other->remoteinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedAction_descriptor_;
  metadata.reflection = FeedAction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace idl

// @@protoc_insertion_point(global_scope)
